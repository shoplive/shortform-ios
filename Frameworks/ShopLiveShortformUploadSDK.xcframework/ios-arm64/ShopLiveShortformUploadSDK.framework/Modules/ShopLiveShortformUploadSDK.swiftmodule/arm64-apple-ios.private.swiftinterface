// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveShortformUploadSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Foundation
import MobileCoreServices
import Photos
import PhotosUI
import ShopLiveShortformSDK
@_exported import ShopLiveShortformUploadSDK
import ShopliveSDKCommon
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import ffmpegkit
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SLPlayerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var player: AVFoundation.AVPlayer? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var playerLayer: AVFoundation.AVPlayerLayer {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SLPhotoCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var imageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var playerView: ShopLiveShortformUploadSDK.SLPlayerView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var livePhotoView: PhotosUI.PHLivePhotoView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var liveBadgeImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var durationView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var durationLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var indicator: UIKit.UIActivityIndicatorView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var selectedView: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var selectedHeight: UIKit.NSLayoutConstraint?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var orderLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var orderBgView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open var asset: Photos.PHAsset? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isCameraCell: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var duration: Foundation.TimeInterval? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var player: AVFoundation.AVPlayer? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectedAsset: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func timeFormatted(timeInterval: Foundation.TimeInterval) -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) open func popScaleAnim()
  @objc @_Concurrency.MainActor(unsafe) open func update(with phAsset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) open func selectedCell()
  @objc @_Concurrency.MainActor(unsafe) open func willDisplayCell()
  @objc @_Concurrency.MainActor(unsafe) open func endDisplayingCell()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) open func updateImage()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SLBackspaceDetectingTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) open var onDeleteBackwards: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func deleteBackward()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func paste(_ sender: Any?)
  @objc deinit
}
public protocol SLPhotopickerDataSourcesProtocol {
  func headerReferenceSize() -> CoreFoundation.CGSize
  func footerReferenceSize() -> CoreFoundation.CGSize
  func registerSupplementView(collectionView: UIKit.UICollectionView)
  func supplementIdentifier(kind: Swift.String) -> Swift.String
  func configure(supplement view: UIKit.UICollectionReusableView, section: (title: Swift.String, assets: [ShopLiveShortformUploadSDK.SLPHAsset]))
}
public struct SLPHAsset {
  public enum AssetType {
    case photo, video, livePhoto
    public static func == (a: ShopLiveShortformUploadSDK.SLPHAsset.AssetType, b: ShopLiveShortformUploadSDK.SLPHAsset.AssetType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ImageExtType : Swift.String {
    case png, jpg, gif, heic
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var phAsset: Photos.PHAsset?
  public var isSelectedFromCamera: Swift.Bool
  public var selectedOrder: Swift.Int
  public var type: ShopLiveShortformUploadSDK.SLPHAsset.AssetType {
    get
  }
  public var fullResolutionImage: UIKit.UIImage? {
    get
  }
  public func extType(defaultExt: ShopLiveShortformUploadSDK.SLPHAsset.ImageExtType = .png) -> ShopLiveShortformUploadSDK.SLPHAsset.ImageExtType
  @discardableResult
  public func cloudImageDownload(progressBlock: @escaping (Swift.Double) -> Swift.Void, completionBlock: @escaping (UIKit.UIImage?) -> Swift.Void) -> Photos.PHImageRequestID?
  public var originalFileName: Swift.String? {
    get
  }
  public func photoSize(options: Photos.PHImageRequestOptions? = nil, completion: @escaping ((Swift.Int) -> Swift.Void), livePhotoVideoSize: Swift.Bool = false)
  public func videoSize(options: Photos.PHVideoRequestOptions? = nil, completion: @escaping ((Swift.Int) -> Swift.Void))
  @discardableResult
  public func tempCopyMediaFile(videoRequestOptions: Photos.PHVideoRequestOptions? = nil, imageRequestOptions: Photos.PHImageRequestOptions? = nil, livePhotoRequestOptions: Photos.PHLivePhotoRequestOptions? = nil, exportPreset: Swift.String = AVAssetExportPresetHighestQuality, convertLivePhotosToJPG: Swift.Bool = false, progressBlock: ((Swift.Double) -> Swift.Void)? = nil, completionBlock: @escaping ((Foundation.URL, Swift.String) -> Swift.Void)) -> Photos.PHImageRequestID?
  public func exportVideoFile(options: Photos.PHVideoRequestOptions? = nil, outputURL: Foundation.URL? = nil, outputFileType: AVFoundation.AVFileType = .mov, progressBlock: ((Swift.Double) -> Swift.Void)? = nil, completionBlock: @escaping ((Foundation.URL, Swift.String) -> Swift.Void))
  public static func asset(with localIdentifier: Swift.String) -> ShopLiveShortformUploadSDK.SLPHAsset?
}
extension ShopLiveShortformUploadSDK.SLPHAsset : Swift.Equatable {
  public static func == (lhs: ShopLiveShortformUploadSDK.SLPHAsset, rhs: ShopLiveShortformUploadSDK.SLPHAsset) -> Swift.Bool
}
public struct SLAssetsCollection {
  public var sections: [(title: Swift.String, assets: [ShopLiveShortformUploadSDK.SLPHAsset])]?
}
@_hasMissingDesignatedInitializers public class SLSynchronizedDictionary<K, V> where K : Swift.Hashable {
  @objc deinit
  public func removeAll()
  public func removeValue(forKey: K)
  public func forEach(_ closure: ((K, V) -> Swift.Void))
  public subscript(key: K) -> V? {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) open class SLWSTagView : UIKit.UIView, UIKit.UITextInputTraits {
  @_Concurrency.MainActor(unsafe) open var displayText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var displayDelimiter: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedTextColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc public var autocapitalizationType: UIKit.UITextAutocapitalizationType
  @_Concurrency.MainActor(unsafe) @objc public var autocorrectionType: UIKit.UITextAutocorrectionType
  @_Concurrency.MainActor(unsafe) @objc public var spellCheckingType: UIKit.UITextSpellCheckingType
  @_Concurrency.MainActor(unsafe) @objc public var keyboardType: UIKit.UIKeyboardType
  @_Concurrency.MainActor(unsafe) @objc public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @_Concurrency.MainActor(unsafe) @objc public var returnKeyType: UIKit.UIReturnKeyType
  @_Concurrency.MainActor(unsafe) @objc public var enablesReturnKeyAutomatically: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public var isSecureTextEntry: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(tag: ShopLiveShortformUploadSDK.SLWSTag)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func sizeToFit(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
extension ShopLiveShortformUploadSDK.SLWSTagView : UIKit.UIKeyInput {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func deleteBackward()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SLAlbumPopView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var bgView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var popupView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) open var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SLBundle {
  open class func slPhotoPickerBundleImage() -> UIKit.UIImage?
  open class func podBundleImage(named: Swift.String) -> UIKit.UIImage?
  @objc deinit
}
public struct SLWSTag : Swift.Hashable {
  public let text: Swift.String
  public let context: Swift.AnyHashable?
  public init(_ text: Swift.String, context: Swift.AnyHashable? = nil)
  public func equals(_ other: ShopLiveShortformUploadSDK.SLWSTag) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: ShopLiveShortformUploadSDK.SLWSTag, rhs: ShopLiveShortformUploadSDK.SLWSTag) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SLAssetPreviewViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var asset: Photos.PHAsset? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct SLWSTagAcceptOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let `return`: ShopLiveShortformUploadSDK.SLWSTagAcceptOption
  public static let comma: ShopLiveShortformUploadSDK.SLWSTagAcceptOption
  public static let space: ShopLiveShortformUploadSDK.SLWSTagAcceptOption
  public static let sharp: ShopLiveShortformUploadSDK.SLWSTagAcceptOption
  public typealias ArrayLiteralElement = ShopLiveShortformUploadSDK.SLWSTagAcceptOption
  public typealias Element = ShopLiveShortformUploadSDK.SLWSTagAcceptOption
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SLWSTagsField : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) final public let textField: ShopLiveShortformUploadSDK.SLBackspaceDetectingTextField
  @_Concurrency.MainActor(unsafe) public var isDisplayMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak open var textDelegate: (any UIKit.UITextFieldDelegate)?
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var delimiter: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isDelimiterVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldTokenizeAfterResigningFirstResponder: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var enableScrolling: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var layoutMargins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "use 'textField.textColor' directly.")
  @_Concurrency.MainActor(unsafe) open var fieldTextColor: UIKit.UIColor? {
    get
    set
  }
  @available(iOS 10.0, *)
  @available(*, deprecated, message: "use 'textField.fieldTextContentType' directly.")
  @_Concurrency.MainActor(unsafe) open var fieldTextContentType: UIKit.UITextContentType! {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderAlwaysVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var readOnly: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var acceptTagOptions: [ShopLiveShortformUploadSDK.SLWSTagAcceptOption]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var spaceBetweenTags: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var spaceBetweenLines: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var tags: [ShopLiveShortformUploadSDK.SLWSTag] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var tagViews: [ShopLiveShortformUploadSDK.SLWSTagView]
  @_Concurrency.MainActor(unsafe) open var onShouldAcceptTag: ((ShopLiveShortformUploadSDK.SLWSTagsField) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onDidChangeText: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ text: Swift.String?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidAddTag: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ tag: ShopLiveShortformUploadSDK.SLWSTag) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidRemoveTag: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ tag: ShopLiveShortformUploadSDK.SLWSTag) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidSelectTagView: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ tag: ShopLiveShortformUploadSDK.SLWSTagView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidUnselectTagView: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ tag: ShopLiveShortformUploadSDK.SLWSTagView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onValidateTag: ((ShopLiveShortformUploadSDK.SLWSTag, [ShopLiveShortformUploadSDK.SLWSTag]) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onVerifyTag: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ text: Swift.String) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onDidChangeHeightTo: ((ShopLiveShortformUploadSDK.SLWSTagsField, _ height: CoreFoundation.CGFloat) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var useCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var preferredMaxLayoutWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open var suggestions: [Swift.String]
  @_Concurrency.MainActor(unsafe) open var caseSensitiveSuggestions: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func setCornerRadius(to cornerRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func acceptCurrentTextAsTag()
  @_Concurrency.MainActor(unsafe) open var isEditing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func beginEditing()
  @_Concurrency.MainActor(unsafe) open func endEditing()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func reloadInputViews()
  @_Concurrency.MainActor(unsafe) open func addTags(_ tags: [Swift.String])
  @_Concurrency.MainActor(unsafe) open func addTags(_ tags: [ShopLiveShortformUploadSDK.SLWSTag])
  @_Concurrency.MainActor(unsafe) open func addTag(_ tag: Swift.String)
  @_Concurrency.MainActor(unsafe) open func addTag(_ tag: ShopLiveShortformUploadSDK.SLWSTag)
  @_Concurrency.MainActor(unsafe) open func removeTag(_ tag: Swift.String)
  @_Concurrency.MainActor(unsafe) open func removeTag(_ tag: ShopLiveShortformUploadSDK.SLWSTag)
  @_Concurrency.MainActor(unsafe) open func removeTagAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func removeTags()
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func tokenizeTextFieldText() -> ShopLiveShortformUploadSDK.SLWSTag?
  @objc @_Concurrency.MainActor(unsafe) open func onTextFieldDidChange(_ sender: Swift.AnyObject)
  @_Concurrency.MainActor(unsafe) open func selectNextTag()
  @_Concurrency.MainActor(unsafe) open func selectPrevTag()
  @_Concurrency.MainActor(unsafe) open func selectTagView(_ tagView: ShopLiveShortformUploadSDK.SLWSTagView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func unselectAllTagViewsAnimated(_ animated: Swift.Bool = false)
}
extension ShopLiveShortformUploadSDK.SLWSTagsField {
  @available(*, deprecated, message: "use 'textField.keyboardType' directly.")
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.returnKeyType' directly.")
  @_Concurrency.MainActor(unsafe) public var returnKeyType: UIKit.UIReturnKeyType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.spellCheckingType' directly.")
  @_Concurrency.MainActor(unsafe) public var spellCheckingType: UIKit.UITextSpellCheckingType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.autocapitalizationType' directly.")
  @_Concurrency.MainActor(unsafe) public var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.autocorrectionType' directly.")
  @_Concurrency.MainActor(unsafe) public var autocorrectionType: UIKit.UITextAutocorrectionType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.enablesReturnKeyAutomatically' directly.")
  @_Concurrency.MainActor(unsafe) public var enablesReturnKeyAutomatically: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @available(*, deprecated, message: "Use 'inputFieldAccessoryView' instead")
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var inputFieldAccessoryView: UIKit.UIView? {
    get
    set
  }
}
extension ShopLiveShortformUploadSDK.SLWSTagsField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension ShopLiveShortformUploadSDK.SLWSTagsField {
  @_Concurrency.MainActor(unsafe) public static func == (lhs: UIKit.UITextField, rhs: ShopLiveShortformUploadSDK.SLWSTagsField) -> Swift.Bool
}
extension ShopLiveShortformUploadSDK.SLWSTagsField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
public protocol SLPhotosPickerViewControllerDelegate : AnyObject {
  func dismissPhotoPicker(withPHAssets: [Photos.PHAsset])
  func dismissPhotoPicker(withSLPHAssets: [ShopLiveShortformUploadSDK.SLPHAsset])
  func shouldDismissPhotoPicker(withSLPHAssets: [ShopLiveShortformUploadSDK.SLPHAsset]) -> Swift.Bool
  func dismissComplete()
  func photoPickerDidCancel()
  func canSelectAsset(phAsset: Photos.PHAsset) -> Swift.Bool
  func didExceedMaximumNumberOfSelection(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController)
  func handleAlbumPermissions(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController, status: ShopliveSDKCommon.PermissionStatus)
  func handleCameraPermissions(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController, status: ShopliveSDKCommon.PermissionStatus)
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewControllerDelegate {
  public func deninedAuthoization()
  public func dismissPhotoPicker(withPHAssets: [Photos.PHAsset])
  public func dismissPhotoPicker(withSLPHAssets: [ShopLiveShortformUploadSDK.SLPHAsset])
  public func shouldDismissPhotoPicker(withSLPHAssets: [ShopLiveShortformUploadSDK.SLPHAsset]) -> Swift.Bool
  public func dismissComplete()
  public func photoPickerDidCancel()
  public func canSelectAsset(phAsset: Photos.PHAsset) -> Swift.Bool
  public func didExceedMaximumNumberOfSelection(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController)
}
public protocol SLPhotosPickerLogDelegate : AnyObject {
  func selectedCameraCell(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController)
  func deselectedPhoto(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController, at: Swift.Int)
  func selectedPhoto(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController, at: Swift.Int)
  func selectedAlbum(picker: ShopLiveShortformUploadSDK.SLPhotosPickerViewController, title: Swift.String, at: Swift.Int)
}
public struct SLPhotosPickerConfigure {
  public var customLocalizedTitle: [Swift.String : Swift.String]
  public var tapHereToChange: Swift.String
  public var cancelTitle: Swift.String
  public var doneTitle: Swift.String
  public var emptyMessage: Swift.String
  public var selectMessage: Swift.String
  public var deselectMessage: Swift.String
  public var emptyImage: UIKit.UIImage?
  public var usedCameraButton: Swift.Bool
  public var defaultToFrontFacingCamera: Swift.Bool
  public var usedPrefetch: Swift.Bool
  public var previewAtForceTouch: Swift.Bool
  public var startplayBack: PhotosUI.PHLivePhotoViewPlaybackStyle
  public var allowedLivePhotos: Swift.Bool
  public var allowedVideo: Swift.Bool
  public var allowedAlbumCloudShared: Swift.Bool
  public var allowedPhotograph: Swift.Bool
  public var allowedVideoRecording: Swift.Bool
  public var recordingVideoQuality: UIKit.UIImagePickerController.QualityType
  public var maxVideoDuration: Foundation.TimeInterval?
  public var autoPlay: Swift.Bool
  public var muteAudio: Swift.Bool
  public var preventAutomaticLimitedAccessAlert: Swift.Bool
  public var mediaType: Photos.PHAssetMediaType?
  public var numberOfColumn: Swift.Int
  public var minimumLineSpacing: CoreFoundation.CGFloat
  public var minimumInteritemSpacing: CoreFoundation.CGFloat
  public var singleSelectedMode: Swift.Bool
  public var singleSelectedDismiss: Swift.Bool
  public var maxSelectedAssets: Swift.Int?
  public var fetchOption: Photos.PHFetchOptions?
  public var fetchCollectionOption: [ShopLiveShortformUploadSDK.FetchCollectionType : Photos.PHFetchOptions]
  public var selectedColor: UIKit.UIColor
  public var cameraBgColor: UIKit.UIColor
  public var cameraIcon: UIKit.UIImage?
  public var nibSet: (nibName: Swift.String, bundle: Foundation.Bundle)?
  public var cameraCellNibSet: (nibName: Swift.String, bundle: Foundation.Bundle)?
  public var fetchCollectionTypes: [(Photos.PHAssetCollectionType, Photos.PHAssetCollectionSubtype)]?
  public var groupByFetch: ShopLiveShortformUploadSDK.PHFetchedResultGroupedBy?
  public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask
  public var popup: [ShopLiveShortformUploadSDK.PopupConfigure]
  public init()
}
public enum FetchCollectionType {
  case assetCollections(Photos.PHAssetCollectionType)
  case topLevelUserCollections
}
extension ShopLiveShortformUploadSDK.FetchCollectionType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ShopLiveShortformUploadSDK.FetchCollectionType, b: ShopLiveShortformUploadSDK.FetchCollectionType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PopupConfigure {
  case animation(Foundation.TimeInterval)
}
public struct Platform {
  public static var isSimulator: Swift.Bool {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class SLPhotosPickerViewController : UIKit.UIViewController {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var navigationBar: UIKit.UINavigationBar!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var titleView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var albumPopView: ShopLiveShortformUploadSDK.SLAlbumPopView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var collectionView: UIKit.UICollectionView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var indicator: UIKit.UIActivityIndicatorView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var popArrowImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var customNavItem: UIKit.UINavigationItem!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var cancelButton: UIKit.UIBarButtonItem!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var navigationBarTopConstraint: UIKit.NSLayoutConstraint!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var emptyView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var emptyImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var emptyMessageLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var photosButton: UIKit.UIBarButtonItem!
  @_Concurrency.MainActor(unsafe) public var loadingProgress: ShopliveSDKCommon.SLLoadingAlertController {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShopLiveShortformUploadSDK.SLPhotosPickerViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var logDelegate: (any ShopLiveShortformUploadSDK.SLPhotosPickerLogDelegate)?
  @_Concurrency.MainActor(unsafe) open var selectedAssets: [ShopLiveShortformUploadSDK.SLPHAsset]
  @_Concurrency.MainActor(unsafe) open var isSelectedFromCamera: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var configure: ShopLiveShortformUploadSDK.SLPhotosPickerConfigure
  @_Concurrency.MainActor(unsafe) public var customDataSouces: (any ShopLiveShortformUploadSDK.SLPhotopickerDataSourcesProtocol)?
  @objc @_Concurrency.MainActor(unsafe) open var canSelectAsset: ((Photos.PHAsset) -> Swift.Bool)?
  @objc @_Concurrency.MainActor(unsafe) open var didExceedMaximumNumberOfSelection: ((ShopLiveShortformUploadSDK.SLPhotosPickerViewController) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var dismissCompletion: (() -> Swift.Void)?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) convenience public init(withPHAssets: (([Photos.PHAsset]) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(withSLPHAssets: (([ShopLiveShortformUploadSDK.SLPHAsset]) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func deselectWhenUsingSingleSelectedMode()
  @_Concurrency.MainActor(unsafe) open func maxCheck() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func singleSelected()
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func registerNib(nibName: Swift.String, bundle: Foundation.Bundle)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func makeUI()
  @objc @IBAction @_Concurrency.MainActor(unsafe) dynamic open func cancelButtonTap()
  @objc @IBAction @_Concurrency.MainActor(unsafe) dynamic open func doneButtonTap()
  @objc @IBAction @_Concurrency.MainActor(unsafe) dynamic open func limitButtonTap()
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) public func dismissPicker()
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : PhotosUI.PHLivePhotoViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func livePhotoView(_ livePhotoView: PhotosUI.PHLivePhotoView, didEndPlaybackWith playbackStyle: PhotosUI.PHLivePhotoViewPlaybackStyle)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func livePhotoView(_ livePhotoView: PhotosUI.PHLivePhotoView, willBeginPlaybackWith playbackStyle: PhotosUI.PHLivePhotoViewPlaybackStyle)
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : Photos.PHPhotoLibraryChangeObserver {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoLibraryDidChange(_ changeInstance: Photos.PHChange)
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDataSourcePrefetching {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, prefetchItemsAt indexPaths: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cancelPrefetchingForItemsAt indexPaths: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreFoundation.CGSize
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : UIKit.UIViewControllerPreviewingDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewingContext(_ previewingContext: any UIKit.UIViewControllerPreviewing, viewControllerForLocation location: CoreFoundation.CGPoint) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewingContext(_ previewingContext: any UIKit.UIViewControllerPreviewing, commit viewControllerToCommit: UIKit.UIViewController)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, contextMenuConfigurationForItemAt indexPath: Foundation.IndexPath, point: CoreFoundation.CGPoint) -> UIKit.UIContextMenuConfiguration?
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : UIKit.UINavigationBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func position(for bar: any UIKit.UIBarPositioning) -> UIKit.UIBarPosition
}
extension UIKit.UIImage {
  public func colorMask(color: UIKit.UIColor) -> UIKit.UIImage
}
extension ShopLiveShortformUploadSDK.SLPhotosPickerViewController : ShopliveSDKCommon.SLLoadingAlertControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func finishLoading()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func cancelLoading()
}
@_hasMissingDesignatedInitializers public class ShopLiveShortformUpload {
  public static func upload(_ vc: UIKit.UIViewController, permissionHandler: (any ShopliveSDKCommon.ShopLivePermissionHandler)? = nil)
  @objc deinit
}
public enum PHFetchedResultGroupedBy {
  case year
  case month
  case week
  case day
  case hour
  case custom(dateFormat: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SLCollectionTableViewCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var thumbImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var subTitleLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShopLiveShortformUploadSDK.SLPHAsset.AssetType : Swift.Equatable {}
extension ShopLiveShortformUploadSDK.SLPHAsset.AssetType : Swift.Hashable {}
extension ShopLiveShortformUploadSDK.SLPHAsset.ImageExtType : Swift.Equatable {}
extension ShopLiveShortformUploadSDK.SLPHAsset.ImageExtType : Swift.Hashable {}
extension ShopLiveShortformUploadSDK.SLPHAsset.ImageExtType : Swift.RawRepresentable {}
