// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveShortformSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CryptoKit
import Foundation
import ShopliveSDKCommon
import Swift
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol SLMP4CachingPlayerItemDelegate {
  @objc optional func playerItem(_ playerItem: ShopLiveShortformSDK.SLMP4CachingPlayerItem, didFinishDownloadingFileAt filePath: Swift.String)
  @objc optional func playerItem(_ playerItem: ShopLiveShortformSDK.SLMP4CachingPlayerItem, didDownloadBytesSoFar bytesDownloaded: Swift.Int, outOf bytesExpected: Swift.Int)
  @objc optional func playerItem(_ playerItem: ShopLiveShortformSDK.SLMP4CachingPlayerItem, downloadingFailedWith error: any Swift.Error)
  @objc optional func playerItemReadyToPlay(_ playerItem: ShopLiveShortformSDK.SLMP4CachingPlayerItem)
  @objc optional func playerItemDidFailToPlay(_ playerItem: ShopLiveShortformSDK.SLMP4CachingPlayerItem, withError error: (any Swift.Error)?)
  @objc optional func playerItemPlaybackStalled(_ playerItem: ShopLiveShortformSDK.SLMP4CachingPlayerItem)
}
@objc @_inheritsConvenienceInitializers final public class SLMP4CachingPlayerItem : AVFoundation.AVPlayerItem {
  final public var passOnObject: Any?
  weak final public var delegate: (any ShopLiveShortformSDK.SLMP4CachingPlayerItemDelegate)?
  convenience public init(url: Foundation.URL, avUrlAssetOptions: [Swift.String : Any]? = nil)
  convenience public init(url: Foundation.URL, customFileExtension: Swift.String, avUrlAssetOptions: [Swift.String : Any]? = nil)
  public init(url: Foundation.URL, saveFilePath: Swift.String, customFileExtension: Swift.String?, avUrlAssetOptions: [Swift.String : Any]? = nil)
  public init(nonCachingURL url: Foundation.URL, avUrlAssetOptions: [Swift.String : Any]? = nil)
  convenience public init(data: Foundation.Data, customFileExtension: Swift.String) throws
  public init(filePathURL: Foundation.URL, fileExtension: Swift.String? = nil)
  @objc override dynamic public init(asset: AVFoundation.AVAsset, automaticallyLoadedAssetKeys: [Swift.String]?)
  @objc deinit
  final public func download()
  @objc override final public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc public protocol ShopLiveShortformReceiveHandlerDelegate {
  @objc optional func handleShare(shareUrl: Swift.String)
  @objc optional func onError(error: any Swift.Error)
  @objc optional func onEvent(command: Swift.String, payload: Swift.String?)
}
public protocol ShopLiveShortformNativeHandlerDelegate : AnyObject {
  func handleProductItem(url: Swift.String, shortsDetail: ShopLiveShortformSDK.ShortsDetail)
  func handleProductBanner(url: Swift.String, shortsDetail: ShopLiveShortformSDK.ShortsDetail)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @_hasMissingDesignatedInitializers final public class ShortsReceiveInterface {
    public static func setHandler(_ handler: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
    public static func setNativeHandler(_ handler: (any ShopLiveShortformSDK.ShopLiveShortformNativeHandlerDelegate)?)
    @objc deinit
  }
}
public protocol ShopLiveShortformListViewDelegate : ObjectiveC.NSObject {
  func onListViewError(error: any Swift.Error)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public enum CardViewType {
    case type1
    case type2
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.CardViewType, b: ShopLiveShortformSDK.ShopLiveShortform.CardViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ListViewType {
    case vertical
    case horizontal
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.ListViewType, b: ShopLiveShortformSDK.ShopLiveShortform.ListViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlayableType {
    case FIRST
    case CENTER
    case ALL
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.PlayableType, b: ShopLiveShortformSDK.ShopLiveShortform.PlayableType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_inheritsConvenienceInitializers public class CardTypeViewBuilder : ShopLiveShortformSDK.ListViewBaseBuilder {
    @discardableResult
    public func build(cardViewType: ShopLiveShortformSDK.ShopLiveShortform.CardViewType, listViewDelegate: (any ShopLiveShortformSDK.ShopLiveShortformListViewDelegate)? = nil, enableSnap: Swift.Bool = false, enablePlayVideo: Swift.Bool = true, playOnlyOnWifi: Swift.Bool = false, cellSpacing: CoreFoundation.CGFloat = 20) -> Self
    public func getView() -> UIKit.UIView
    override public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class ListViewBuilder : ShopLiveShortformSDK.ListViewBaseBuilder {
    @discardableResult
    public func build(cardViewType: ShopLiveShortformSDK.ShopLiveShortform.CardViewType, listViewType: ShopLiveShortformSDK.ShopLiveShortform.ListViewType, playableType: ShopLiveShortformSDK.ShopLiveShortform.PlayableType, listViewDelegate: (any ShopLiveShortformSDK.ShopLiveShortformListViewDelegate)? = nil, enableSnap: Swift.Bool = false, enablePlayVideo: Swift.Bool = true, playOnlyOnWifi: Swift.Bool = false, cellSpacing: CoreFoundation.CGFloat = 20) -> Self
    public func getView() -> UIKit.UIView
    override public init()
    @objc deinit
  }
}
public struct ShortsDetail : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShortformError : Swift.Error {
  case statusCode(Swift.Int)
  case invalidConfig
  case other(any Swift.Error)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @_hasMissingDesignatedInitializers final public class BridgeInterface {
    public static func connect(_ webview: WebKit.WKWebView)
    public static func present(viewController: UIKit.UIViewController?)
    public static func disconnect()
    @objc deinit
  }
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ShortsBridgeModel : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class ShopLiveShortform {
  public static func close()
  public static func getShopliveWindow() -> UIKit.UIWindow?
  @objc deinit
}
extension Swift.Error {
  public var isShortformError: Swift.Bool {
    get
  }
  public var shortformError: ShopLiveShortformSDK.ShortformError? {
    get
  }
}
public protocol SLShortsVideoPlayerDelegate : AnyObject {
  func handlePlayerItemStatus(_ status: AVFoundation.AVPlayerItem.Status)
  func handleTimeControlStatus(_ status: AVFoundation.AVPlayer.TimeControlStatus)
  func handleDidPlayToEndTime(video: ShopLiveShortformSDK.ShopLiveShortform.ShortsVideo?)
  func onVideoTimeUpdated(time: Swift.Float64)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @objc @_inheritsConvenienceInitializers open class VideoPlayer : ObjectiveC.NSObject {
    weak public var playerDelegate: (any ShopLiveShortformSDK.SLShortsVideoPlayerDelegate)?
    public var timeUpdateInterval: Swift.Double
    public func setShortsVideo(video: ShopLiveShortformSDK.ShopLiveShortform.ShortsVideo)
    @objc override dynamic public init()
    @objc deinit
    public func setStopTime(time: CoreMedia.CMTime)
    public func play()
    public func pause()
    public func replay()
    public func stop()
    public func seekTo(time: CoreMedia.CMTime)
    public func setVideoGravity(_ videoGravity: AVFoundation.AVLayerVideoGravity)
    public func attach(parent: UIKit.UIView)
    public func detach()
    @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  }
}
final public class Bindable<T> {
  final public var listener: ((T) -> Swift.Void)?
  final public var value: T {
    get
    set
  }
  public init(_ value: T)
  final public func bind(listener: ((T) -> Swift.Void)?)
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public class ShortsVideo {
    public var videoUrl: Foundation.URL
    public var player: AVFoundation.AVPlayer?
    public var seekNotificationEnabled: Swift.Bool
    public init(videoUrl: Foundation.URL, maxBufferDuration: Swift.Double = 2)
    @objc deinit
    public func getVideoDuration() -> Swift.Double
    public func seekTo(time: CoreMedia.CMTime)
    public func getVideoSize() -> CoreFoundation.CGSize?
  }
}
public class ListViewBaseBuilder {
  public init()
  final public func setCardViewType(type: ShopLiveShortformSDK.ShopLiveShortform.CardViewType)
  final public func enableSnap()
  final public func disableSnap()
  final public func enablePlayVideos()
  final public func disablePlayVideos()
  final public func scrollToTop()
  final public func setPlayOnlyWifi(isEnabled: Swift.Bool)
  final public func setCellSpacing(spacing: CoreFoundation.CGFloat)
  final public func setScrollContentOffset(offset: CoreFoundation.CGFloat)
  final public func getScrollContentOffset() -> CoreFoundation.CGPoint
  final public func setPlayableType(type: ShopLiveShortformSDK.ShopLiveShortform.PlayableType)
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ShortsModel : ShopliveSDKCommon.BaseResponsable, Swift.Equatable {
    public var _s: Swift.Int?
    public var _e: Swift.String?
    public var _d: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
    public static func == (lhs: ShopLiveShortformSDK.ShopLiveShortform.ShortsModel, rhs: ShopLiveShortformSDK.ShopLiveShortform.ShortsModel) -> Swift.Bool
    public var validate: Swift.Bool {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension ShopLiveShortformSDK.ShopLiveShortform.ShortsModel {
  public var overlayUrl: Foundation.URL? {
    get
  }
}
public enum SLMP4CachingPlayerItemConfiguration {
  public static var downloadBufferLimit: Swift.Int
  public static var readDataLimit: Swift.Int
  public static var shouldVerifyDownloadedFileSize: Swift.Bool
  public static var minimumExpectedFileSize: Swift.Int
}
@_hasMissingDesignatedInitializers public class ShortFormConfigurationInfosManager {
  public static let shared: ShopLiveShortformSDK.ShortFormConfigurationInfosManager
  public func getBaseUrl() -> Swift.String
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform.CardViewType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.CardViewType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.ListViewType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.ListViewType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PlayableType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PlayableType : Swift.Hashable {}
