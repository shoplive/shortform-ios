// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveShortformSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Foundation
import QuartzCore
import ShopliveSDKCommon
import Swift
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _StringProcessing
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ShortsCollectionModel : ShopliveSDKCommon.BaseResponsable {
    public var _s: Swift.Int?
    public var _e: Swift.String?
    public let srn: Swift.String?, title: Swift.String?
    public let shortsList: [ShopLiveShortformSDK.ShopLiveShortform.ShortsModel]?
    public let reference: Swift.String?
    public let hasMore: Swift.Bool?
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@objc public protocol ShopLiveShortformReceiveHandlerDelegate {
  @objc optional func handleShare(shareUrl: Swift.String)
  @objc optional func handleShare(shareMetadata: ShopLiveShortformSDK.ShopLiveShareMetaData)
  @objc optional func onError(error: any Swift.Error)
  @objc optional func onEvent(command: Swift.String, payload: Swift.String?)
  @objc optional func onDidDisAppear()
  @objc optional func onDidAppear()
}
public protocol ShopLiveShortformNativeHandlerDelegate : AnyObject {
  func handleProductItem(shortsId: Swift.String, shortsSrn: Swift.String, product: ShopLiveShortformSDK.Product)
  func handleProductBanner(shortsId: Swift.String, shortsSrn: Swift.String, scheme: Swift.String, shortsDetail: ShopLiveShortformSDK.ShortsDetail)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @_hasMissingDesignatedInitializers final public class ShortsReceiveInterface {
    public static func setHandler(_ handler: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
    public static func setNativeHandler(_ handler: (any ShopLiveShortformSDK.ShopLiveShortformNativeHandlerDelegate)?)
    @objc deinit
  }
}
public protocol ShopLiveShortformListViewDelegate : ObjectiveC.NSObject {
  func onListViewError(error: any Swift.Error)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public enum CardViewType {
    case type0
    case type1
    case type2
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.CardViewType, b: ShopLiveShortformSDK.ShopLiveShortform.CardViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ListViewType {
    case vertical
    case horizontal
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.ListViewType, b: ShopLiveShortformSDK.ShopLiveShortform.ListViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlayableType {
    case FIRST
    case CENTER
    case ALL
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.PlayableType, b: ShopLiveShortformSDK.ShopLiveShortform.PlayableType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_inheritsConvenienceInitializers public class CardTypeViewBuilder : ShopLiveShortformSDK.ListViewBaseBuilder {
    @discardableResult
    public func build(cardViewType: ShopLiveShortformSDK.ShopLiveShortform.CardViewType = .type1, listViewDelegate: (any ShopLiveShortformSDK.ShopLiveShortformListViewDelegate)? = nil, enableSnap: Swift.Bool = false, enablePlayVideo: Swift.Bool = true, playOnlyOnWifi: Swift.Bool = false, cellSpacing: CoreFoundation.CGFloat = 8, cellRadius: CoreFoundation.CGFloat = 16, viewCountVisibility: Swift.Bool = true, avAudioSessionCategoryOptions: AVFAudio.AVAudioSession.CategoryOptions? = nil) -> Self
    public func getView() -> UIKit.UIView
    override public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class ListViewBuilder : ShopLiveShortformSDK.ListViewBaseBuilder {
    @discardableResult
    public func build(cardViewType: ShopLiveShortformSDK.ShopLiveShortform.CardViewType = .type1, listViewType: ShopLiveShortformSDK.ShopLiveShortform.ListViewType, playableType: ShopLiveShortformSDK.ShopLiveShortform.PlayableType = .FIRST, listViewDelegate: (any ShopLiveShortformSDK.ShopLiveShortformListViewDelegate)? = nil, enableSnap: Swift.Bool = false, enablePlayVideo: Swift.Bool = true, playOnlyOnWifi: Swift.Bool = false, cellSpacing: CoreFoundation.CGFloat = 8, cellRadius: CoreFoundation.CGFloat = 12, viewCountVisibility: Swift.Bool = true, avAudioSessionCategoryOptions: AVFAudio.AVAudioSession.CategoryOptions? = nil) -> Self
    public func getView() -> UIKit.UIView
    override public init()
    @objc deinit
  }
}
public struct ShortsDetail : Swift.Codable {
  public let title: Swift.String?
  public let description: Swift.String?
  public let tags: [Swift.String]?
  public let productCount: Swift.Int?
  public let productBanner: ShopLiveShortformSDK.ProductBanner?
  public let products: [ShopLiveShortformSDK.Product]?
  public let brand: ShopLiveShortformSDK.BrandModel?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ShortFormConfigurationInfosManager {
  public static let shared: ShopLiveShortformSDK.ShortFormConfigurationInfosManager
  public func getBaseUrl() -> Swift.String
  public func setConfigurationURLToEmpty()
  @objc deinit
}
public struct BrandModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShortformError : Swift.Error {
  case statusCode(Swift.Int)
  case invalidConfig
  case other(any Swift.Error)
}
public class ShopLiveShortformCollectionData {
  public var reference: Swift.String?
  public var shortsId: Swift.String?
  public var shortsSrn: Swift.String?
  public var tags: [Swift.String]?
  public var tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator?
  public var brands: [Swift.String]?
  public var shuffle: Swift.Bool?
  public init(reference: Swift.String? = nil, shortsId: Swift.String? = nil, shortsSrn: Swift.String? = nil, tags: [Swift.String]? = nil, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator? = nil, brands: [Swift.String]? = nil, shuffle: Swift.Bool? = nil, referrer: Swift.String? = nil)
  @objc deinit
}
public struct ShopLiveShortformVisibleFullTypeData {
  public var isBookMarkVisible: Swift.Bool
  public var isShareButtonVisible: Swift.Bool
  public var isCommentButtonVisible: Swift.Bool
  public var isLikeButtonVisible: Swift.Bool
  public init(isBookMarkVisible: Swift.Bool = true, isShareButtonVisible: Swift.Bool = true, isCommentButtonVisible: Swift.Bool = true, isLikeButtonVisible: Swift.Bool = true)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveShareMetaData : ObjectiveC.NSObject {
  public var title: Swift.String?
  public var descriptions: Swift.String?
  public var thumbnail: Swift.String?
  public var shortsId: Swift.String?
  public var shortsSrn: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct ProductBanner : Swift.Codable {
  public let title: Swift.String?
  public let imageUrl: Swift.String?
  public let scheme: Swift.String?, traceId: Swift.String?, type: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @_hasMissingDesignatedInitializers final public class BridgeInterface {
    public static func connect(_ webview: WebKit.WKWebView)
    public static func present(viewController: UIKit.UIViewController?)
    public static func disconnect()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ShopLiveShortform {
  public static var sdkVersion: Swift.String
  public static func play(requestData: ShopLiveShortformSDK.ShopLiveShortformCollectionData?)
  public static func play(shortformIdsData: ShopLiveShortformSDK.ShopLiveShortformIdsData, delegate: any ShopLiveShortformSDK.ShortsCollectionViewDataSourcRequestDelegate)
  @available(iOS, deprecated: 1.4.6, message: "this method will be removed on 1.4.7")
  public static func play(requestData: ShopLiveShortformSDK.ShopLiveShortformRelatedData?)
  public static func showPreview(requestData: ShopLiveShortformSDK.ShopLiveShortformRelatedData)
  public static func close()
  public static func getShopliveWindow() -> UIKit.UIWindow?
  public static func setReferrer(referrer: Swift.String?)
  public static func setVisibileFullTypeViews(options: ShopLiveShortformSDK.ShopLiveShortformVisibleFullTypeData)
  @objc deinit
}
extension Swift.Error {
  public var isShortformError: Swift.Bool {
    get
  }
  public var shortformError: ShopLiveShortformSDK.ShortformError? {
    get
  }
}
public class ShopLiveShortformIdsMoreData {
  public var ids: [Swift.String]?
  public var hasMore: Swift.Bool?
  public init(ids: [Swift.String]? = nil, hasMore: Swift.Bool? = nil)
  @objc deinit
}
public protocol SLShortsVideoPlayerDelegate : AnyObject {
  func handlePlayerItemStatus(_ status: AVFoundation.AVPlayerItem.Status)
  func handleTimeControlStatus(_ status: AVFoundation.AVPlayer.TimeControlStatus)
  func handleDidPlayToEndTime(video: ShopLiveShortformSDK.ShopLiveShortform.ShortsVideo?)
  func onVideoTimeUpdated(time: Swift.Float64)
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @objc @_inheritsConvenienceInitializers open class VideoPlayer : ObjectiveC.NSObject {
    weak public var playerDelegate: (any ShopLiveShortformSDK.SLShortsVideoPlayerDelegate)?
    public var timeUpdateInterval: Swift.Double
    public func setShortsVideo(video: ShopLiveShortformSDK.ShopLiveShortform.ShortsVideo)
    @objc override dynamic public init()
    @objc deinit
    public func setStopTime(time: CoreMedia.CMTime)
    public func getCurrentTime() -> Swift.Double?
    public func play()
    public func pause()
    public func replay()
    public func stop()
    public func seekTo(time: CoreMedia.CMTime)
    public func setVideoGravity(_ videoGravity: AVFoundation.AVLayerVideoGravity)
    public func attach(parent: UIKit.UIView)
    public func detach()
    @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  }
}
final public class Bindable<T> {
  final public var listener: ((T) -> Swift.Void)?
  final public var value: T {
    get
    set
  }
  public init(_ value: T)
  final public func bind(listener: ((T) -> Swift.Void)?)
  @objc deinit
}
public class ShopLiveShortformIdsData {
  public var ids: [Swift.String]?
  public var currentId: Swift.String?
  public init(ids: [Swift.String]?, currentId: Swift.String? = nil, referrer: Swift.String? = nil)
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public class ShortsVideo {
    public var videoUrl: Foundation.URL
    public var player: AVFoundation.AVPlayer?
    public var seekNotificationEnabled: Swift.Bool
    public init(videoUrl: Foundation.URL, maxBufferDuration: Swift.Double = 2)
    @objc deinit
    public func getVideoDuration() -> Swift.Double
    public func seekTo(time: CoreMedia.CMTime)
    public func getVideoSize() -> CoreFoundation.CGSize?
  }
}
public struct Product : Swift.Codable {
  public let brand: Swift.String?
  public let productId: Swift.String?
  public let customerProductId: Swift.String?
  public let name: Swift.String?
  public let description: Swift.String?
  public let url: Swift.String?
  public let sku: Swift.String?
  public let imageUrl: Swift.String?
  public let currency: Swift.String?
  public let showPrice: Swift.Bool?
  public let originalPrice: Swift.Double?
  public let discountPrice: Swift.Double?
  public let discountRate: Swift.Double?
  public let stockStatus: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShopLiveTagSearchOperator : Swift.String {
  case AND
  case OR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ListViewBaseBuilder {
  public init()
  final public func setCardViewType(type: ShopLiveShortformSDK.ShopLiveShortform.CardViewType)
  final public func enableSnap()
  final public func disableSnap()
  final public func enablePlayVideos()
  final public func disablePlayVideos()
  final public func scrollToTop()
  final public func setPlayOnlyWifi(isEnabled: Swift.Bool)
  final public func setCellSpacing(spacing: CoreFoundation.CGFloat)
  final public func setScrollContentOffset(offset: CoreFoundation.CGFloat)
  final public func getScrollContentOffset() -> CoreFoundation.CGPoint
  final public func setPlayableType(type: ShopLiveShortformSDK.ShopLiveShortform.PlayableType)
  final public func reloadItems()
  final public func setCellBackgroundColor(color: UIKit.UIColor)
  final public func notifyViewRotated()
  final public func submit()
  final public func setVisibleViewCount(isVisible: Swift.Bool)
  final public func setVisibleBrand(isVisible: Swift.Bool)
  final public func setVisibleTitle(isVisisble: Swift.Bool)
  final public func setVisibleProductCount(isVisible: Swift.Bool)
  final public func setVisibleDescription(isVisible: Swift.Bool)
  final public func setCellCornerRadius(radius: CoreFoundation.CGFloat)
  @objc deinit
}
extension ShopLiveShortformSDK.ListViewBaseBuilder {
  final public func enableShuffle()
  final public func disableShuffle()
  final public func setHashTags(tags: [Swift.String]?, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator?)
  final public func setBrands(brands: [Swift.String]?)
}
public class ShopLiveShortformRelatedData {
  public var reference: Swift.String?
  public var productId: Swift.String?
  public var name: Swift.String?
  public var sku: Swift.String?
  public var url: Swift.String?
  public var tags: [Swift.String]?
  public var tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator?
  public var brands: [Swift.String]?
  public var shuffle: Swift.Bool?
  public init(reference: Swift.String? = nil, productId: Swift.String? = nil, name: Swift.String? = nil, sku: Swift.String? = nil, url: Swift.String? = nil, tags: [Swift.String]? = nil, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator? = nil, brands: [Swift.String]? = nil, shuffle: Swift.Bool? = nil, referrer: Swift.String? = nil)
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ShortsModel : ShopliveSDKCommon.BaseResponsable, Swift.Equatable {
    public var _s: Swift.Int?
    public var _e: Swift.String?
    public var _d: Swift.String?
    public let shortsId: Swift.String?
    public let srn: Swift.String?
    public let startAt: Swift.Int?, endAt: Swift.Int?
    public let reference: Swift.String?
    public let shortsDetail: ShopLiveShortformSDK.ShortsDetail?
    public let action: Swift.String?, payload: Swift.String?
    public let shortsType: Swift.String?
    public let traceId: Swift.String?
    public let url: Swift.String?
    public let reasonKey: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
    public static func == (lhs: ShopLiveShortformSDK.ShopLiveShortform.ShortsModel, rhs: ShopLiveShortformSDK.ShopLiveShortform.ShortsModel) -> Swift.Bool
    public var validate: Swift.Bool {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
public protocol ShortsCollectionViewDataSourcRequestDelegate {
  func onShortformListPagination(completion: @escaping (((ShopLiveShortformSDK.ShopLiveShortformIdsMoreData?, (any Swift.Error)?)) -> ()))
  func onShortformListPaginationError(error: any Swift.Error)
}
extension ShopLiveShortformSDK.ShopLiveShortform.CardViewType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.CardViewType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.ListViewType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.ListViewType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PlayableType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PlayableType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveTagSearchOperator : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveTagSearchOperator : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveTagSearchOperator : Swift.RawRepresentable {}
