// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveShortformSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import DeveloperToolsSupport
import Foundation
import QuartzCore
import ShopliveSDKCommon
import Swift
import SwiftUI
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ShopLiveShortformSDKAsset : Swift.Sendable {
  public static let slClosebutton: ShopLiveShortformSDK.ShopLiveShortformSDKImages
  public static let slIcBackBtn: ShopLiveShortformSDK.ShopLiveShortformSDKImages
  public static let slIcMediaFilled: ShopLiveShortformSDK.ShopLiveShortformSDKImages
  public static let slIcPerson: ShopLiveShortformSDK.ShopLiveShortformSDKImages
  public static let slIcShopliveLogo: ShopLiveShortformSDK.ShopLiveShortformSDKImages
  public static let slIcShopliveUserFill: ShopLiveShortformSDK.ShopLiveShortformSDKImages
  public static let slIcShortformEmpty: ShopLiveShortformSDK.ShopLiveShortformSDKImages
}
public struct ShopLiveShortformSDKImages : Swift.Sendable {
  public let name: Swift.String
  public typealias Image = UIKit.UIImage
  public var image: ShopLiveShortformSDK.ShopLiveShortformSDKImages.Image {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, xrOS 1.0, *)
  public var swiftUIImage: SwiftUI.Image {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, xrOS 1.0, *)
extension SwiftUI.Image {
  public init(asset: ShopLiveShortformSDK.ShopLiveShortformSDKImages)
  public init(asset: ShopLiveShortformSDK.ShopLiveShortformSDKImages, label: SwiftUI.Text)
  public init(decorative asset: ShopLiveShortformSDK.ShopLiveShortformSDKImages)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveShortformSDKResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum ShopLiveShortformSDKStrings : Swift.Sendable {
  public static let shortformListEmptyData: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AVAssetDownloadManager : ObjectiveC.NSObject {
  public static let shared: ShopLiveShortformSDK.AVAssetDownloadManager
  final public func deleteCaches()
  final public func enableDeleteCacheOnTerminate(isEnabled: Swift.Bool)
  @objc deinit
}
extension ShopLiveShortformSDK.AVAssetDownloadManager : AVFoundation.AVAssetDownloadDelegate {
  @objc final public func urlSession(_ session: Foundation.URLSession, assetDownloadTask: AVFoundation.AVAssetDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveShareMetaData : ObjectiveC.NSObject {
  public var title: Swift.String?
  public var descriptions: Swift.String?
  public var thumbnail: Swift.String?
  public var shortsId: Swift.String?
  public var shortsSrn: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public class ShopLiveShortformCollectionData {
  public var reference: Swift.String?
  public var shortsId: Swift.String?
  public var tags: [Swift.String]?
  public var tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator?
  public var brands: [Swift.String]?
  public var shuffle: Swift.Bool?
  public var skus: [Swift.String]?
  public var shortsCollectionId: Swift.String?
  public var delegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?
  public init(reference: Swift.String? = nil, shortsId: Swift.String? = nil, tags: [Swift.String]? = nil, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator? = nil, brands: [Swift.String]? = nil, shuffle: Swift.Bool? = nil, referrer: Swift.String? = nil, skus: [Swift.String]? = nil, shortsCollectionId: Swift.String?, delegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
  @objc deinit
}
public class ShopLiveShortformIdsData {
  public var ids: [ShopLiveShortformSDK.ShopLiveShortformIdData]?
  public var currentId: Swift.String?
  public init(ids: [ShopLiveShortformSDK.ShopLiveShortformIdData]?, currentId: Swift.String? = nil, referrer: Swift.String? = nil)
  @objc deinit
}
public struct ShopLiveShortformIdData {
  public let shortsId: Swift.String
  public let payload: [Swift.String : Any]?
  public init(shortsId: Swift.String, payload: [Swift.String : Any]?)
}
public class ShopLiveShortformIdsMoreData {
  public var ids: [ShopLiveShortformSDK.ShopLiveShortformIdData]?
  public var hasMore: Swift.Bool?
  public init(ids: [ShopLiveShortformSDK.ShopLiveShortformIdData]? = nil, hasMore: Swift.Bool? = nil)
  @objc deinit
}
final public class ShopLiveShortformPreviewData : ShopLiveShortformSDK.ShopLiveShortformRelatedData {
  final public var isMuted: Swift.Bool?
  final public var isEnabledVolumeKey: Swift.Bool
  final public var previewPosition: ShopLiveShortformSDK.ShopLiveShortform.PreviewPosition?
  final public var previewScale: CoreFoundation.CGFloat?
  final public var previewRadius: CoreFoundation.CGFloat?
  final public var previewEdgeInset: UIKit.UIEdgeInsets?
  final public var previewFloatingOffset: UIKit.UIEdgeInsets?
  final public var useCloseButton: Swift.Bool?
  final public var useCustomAction: Swift.Bool
  final public var enableSwipeOut: Swift.Bool?
  final public var clickEventCallBack: (() -> ())?
  final public var maxCount: Swift.Int?
  public init(shortsId: Swift.String? = nil, isEnabledVolumeKey: Swift.Bool = false, reference: Swift.String? = nil, productId: Swift.String? = nil, name: Swift.String? = nil, skus: [Swift.String]? = nil, url: Swift.String? = nil, tags: [Swift.String]? = nil, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator? = nil, brands: [Swift.String]? = nil, shuffle: Swift.Bool? = nil, referrer: Swift.String? = nil, isMuted: Swift.Bool? = nil, previewPosition: ShopLiveShortformSDK.ShopLiveShortform.PreviewPosition? = nil, previewScale: CoreFoundation.CGFloat? = nil, previewRadius: CoreFoundation.CGFloat? = nil, previewEdgeInset: UIKit.UIEdgeInsets? = nil, previewFloatingOffset: UIKit.UIEdgeInsets? = nil, useCloseButton: Swift.Bool? = nil, enableSwipeOut: Swift.Bool? = nil, maxCount: Swift.Int? = nil, useCustomAction: Swift.Bool = false, clickEventCallBack: (() -> ())? = nil, delegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
  @objc deinit
}
public class ShopLiveShortformRelatedData {
  public var shortsId: Swift.String?
  public var reference: Swift.String?
  public var productId: Swift.String?
  public var name: Swift.String?
  public var skus: [Swift.String]?
  public var url: Swift.String?
  public var tags: [Swift.String]?
  public var tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator?
  public var brands: [Swift.String]?
  public var shuffle: Swift.Bool?
  public var delegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?
  public init(shortsId: Swift.String? = nil, reference: Swift.String? = nil, productId: Swift.String? = nil, name: Swift.String? = nil, skus: [Swift.String]? = nil, url: Swift.String? = nil, tags: [Swift.String]? = nil, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator? = nil, brands: [Swift.String]? = nil, shuffle: Swift.Bool? = nil, referrer: Swift.String? = nil, delegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
  @objc deinit
}
@objc final public class ShopLiveShortformActivityData : ObjectiveC.NSObject {
  final public var viewCount: Swift.Int?
  final public var likeCount: Swift.Int?
  final public var commentCount: Swift.Int?
  final public var bookmarkCount: Swift.Int?
  final public var like: Swift.Bool?
  final public var bookmark: Swift.Bool?
  public init(viewCount: Swift.Int? = nil, likeCount: Swift.Int? = nil, commentCount: Swift.Int? = nil, bookmarkCount: Swift.Int? = nil, like: Swift.Bool? = nil, bookmark: Swift.Bool? = nil)
  @objc deinit
}
public struct BrandModel : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class BrandData : ObjectiveC.NSObject {
  public var id: Swift.Int?
  public var identifier: Swift.String?
  public var imageUrl: Swift.String?
  public var name: Swift.String?
  public var traceId: Swift.String?
  @objc deinit
}
@objc final public class ShopLiveShortformCardData : ObjectiveC.NSObject {
  final public var duration: Swift.Int?
  final public var playCount: Swift.Int?
  final public var playDuration: Swift.Int?
  final public var source: Swift.String?
  final public var videoId: Swift.String?
  final public var campaignId: Swift.String?
  final public var clips: [ShopLiveShortformSDK.ShopLiveShortformClipData]?
  final public var videoUrl: Swift.String?
  final public var previewVideoUrl: Swift.String?
  final public var screenShotUrl: Swift.String?
  final public var specifiedScreenShotUrl: Swift.String?
  final public var cardType: Swift.String?
  final public var srn: Swift.String?
  final public var playerType: Swift.String?
  final public var timeOnlyClips: [ShopLiveShortformSDK.ShopLiveShortformTimeOnlyClipData]?
  final public var width: CoreFoundation.CGFloat?
  final public var heigh: CoreFoundation.CGFloat?
  final public var externalVideoType: Swift.String?
  final public var externalVideoUrl: Swift.String?
  final public var externalVideoId: Swift.String?
  final public var externalVideoThumbnail: Swift.String?
  public init(duration: Swift.Int? = nil, playCount: Swift.Int? = nil, playDuration: Swift.Int? = nil, source: Swift.String? = nil, videoId: Swift.String? = nil, campaignId: Swift.String? = nil, clips: [ShopLiveShortformSDK.ShopLiveShortformClipData]? = nil, videoUrl: Swift.String? = nil, previewVideoUrl: Swift.String? = nil, screenShotUrl: Swift.String? = nil, specifiedScreenShotUrl: Swift.String? = nil, cardType: Swift.String? = nil, srn: Swift.String? = nil, playerType: Swift.String? = nil, timeOnlyClips: [ShopLiveShortformSDK.ShopLiveShortformTimeOnlyClipData]? = nil, width: CoreFoundation.CGFloat? = nil, heigh: CoreFoundation.CGFloat? = nil, externalVideoType: Swift.String? = nil, externalVideoUrl: Swift.String? = nil, externalVideoId: Swift.String? = nil, externalVideoThumbnail: Swift.String? = nil)
  @objc deinit
}
@objc final public class ShopLiveShortformClipData : ObjectiveC.NSObject {
  final public var title: Swift.String?
  final public var clipTitle: Swift.String?
  final public var from: Swift.Int?
  final public var to: Swift.Int?
  public init(title: Swift.String? = nil, clipTitle: Swift.String? = nil, from: Swift.Int? = nil, to: Swift.Int? = nil)
  @objc deinit
}
@objc final public class ShopLiveShortformTimeOnlyClipData : ObjectiveC.NSObject {
  final public var title: Swift.String?
  final public var from: Swift.Double?
  final public var to: Swift.Double?
  final public var subTitles: [Swift.String]?
  public init(title: Swift.String? = nil, from: Swift.Double? = nil, to: Swift.Double? = nil, subTitles: [Swift.String]? = nil)
  @objc deinit
}
public struct Creator : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LinkButton : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Product : Swift.Codable {
  public let brand: Swift.String?
  public let productId: Swift.String?
  public let customerProductId: Swift.String?
  public let name: Swift.String?
  public let description: Swift.String?
  public let url: Swift.String?
  public let sku: Swift.String?
  public let imageUrl: Swift.String?
  public let currency: Swift.String?
  public let showPrice: Swift.Bool?
  public let originalPrice: Swift.Double?
  public let discountPrice: Swift.Double?
  public let discountRate: Swift.Double?
  public let stockStatus: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class ProductData : ObjectiveC.NSObject {
  public var brand: Swift.String?
  public var productId: Swift.String?
  public var customerProductId: Swift.String?
  public var name: Swift.String?
  public var descriptions: Swift.String?
  public var url: Swift.String?
  public var sku: Swift.String?
  public var imageUrl: Swift.String?
  public var currency: Swift.String?
  public var showPrice: Swift.Bool?
  public var originalPrice: Swift.Double?
  public var discountPrice: Swift.Double?
  public var discountRate: Swift.Double?
  public var stockStatus: Swift.String?
  @objc deinit
}
public struct ProductBanner : Swift.Codable {
  public let title: Swift.String?
  public let imageUrl: Swift.String?
  public let scheme: Swift.String?, traceId: Swift.String?, type: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class ProductBannerData : ObjectiveC.NSObject {
  public var title: Swift.String?
  public var imageUrl: Swift.String?
  public var scheme: Swift.String?, traceId: Swift.String?, type: Swift.String?
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ReferenceByType : ShopliveSDKCommon.BaseResponsable, ShopliveSDKCommon.RawDataRepresantable {
    public var _s: Swift.Int?
    public var _e: Swift.String?
    public let generalShortformReference: Swift.String?
    public let promotionShortformReference: Swift.String?
    public let externalShortformReference: Swift.String?
    public var rawData: Foundation.Data?
    public init(from decoder: any Swift.Decoder) throws
    public func getRawDataDict() -> [Swift.String : Any]?
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ShortsCollectionModel : ShopliveSDKCommon.BaseResponsable, ShopliveSDKCommon.RawDataRepresantable {
    public var _s: Swift.Int?
    public var _e: Swift.String?
    public let srn: Swift.String?, title: Swift.String?
    public let shortsList: [ShopLiveShortformSDK.ShopLiveShortform.ShortsModel]?
    public let reference: Swift.String?
    public let referenceByType: ShopLiveShortformSDK.ShopLiveShortform.ReferenceByType?
    public let hasMore: Swift.Bool?
    public var rawData: Foundation.Data?
    public init(from decoder: any Swift.Decoder) throws
    public func getRawDataDict() -> [Swift.String : Any]?
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
public struct ShortsDetail : Swift.Codable {
  public let title: Swift.String?
  public let description: Swift.String?
  public let tags: [Swift.String]?
  public let productCount: Swift.Int?
  public let productBanner: ShopLiveShortformSDK.ProductBanner?
  public let products: [ShopLiveShortformSDK.Product]?
  public let brand: ShopLiveShortformSDK.BrandModel?
  public let creator: ShopLiveShortformSDK.Creator?
  public let linkButton: ShopLiveShortformSDK.LinkButton?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class ShopLiveShortformDetailData : ObjectiveC.NSObject {
  public var title: Swift.String?
  public var descriptions: Swift.String?
  public var tags: [Swift.String]?
  public var productCount: Swift.Int?
  public var productBanner: ShopLiveShortformSDK.ProductBannerData?
  public var products: [ShopLiveShortformSDK.ProductData]?
  public var brand: ShopLiveShortformSDK.BrandData?
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public struct ShortsModel : ShopliveSDKCommon.BaseResponsable, ShopliveSDKCommon.RawDataRepresantable, Swift.Equatable {
    public var _s: Swift.Int?
    public var _e: Swift.String?
    public var _d: Swift.String?
    public let shortsId: Swift.String?
    public let srn: Swift.String?
    public let startAt: Swift.Int?, endAt: Swift.Int?
    public let reference: Swift.String?
    public let shortsDetail: ShopLiveShortformSDK.ShortsDetail?
    public let action: Swift.String?, payload: Swift.String?
    public let shortsType: Swift.String?
    public let traceId: Swift.String?
    public let url: Swift.String?
    public let reasonKey: Swift.String?
    public var rawData: Foundation.Data?
    public init(from decoder: any Swift.Decoder) throws
    public static func == (lhs: ShopLiveShortformSDK.ShopLiveShortform.ShortsModel, rhs: ShopLiveShortformSDK.ShopLiveShortform.ShortsModel) -> Swift.Bool
    public var validate: Swift.Bool {
      get
    }
    public func getRawDataDict() -> [Swift.String : Any]?
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@objc final public class ShopLiveShortformData : ObjectiveC.NSObject {
  final public var shortsId: Swift.String?
  final public var srn: Swift.String?
  final public var activity: ShopLiveShortformSDK.ShopLiveShortformActivityData?
  final public var cards: [ShopLiveShortformSDK.ShopLiveShortformCardData]?
  final public var shortsDetail: ShopLiveShortformSDK.ShopLiveShortformDetailData?
  final public var shortsType: Swift.String?
  final public var rawDictionary: [Swift.String : Any]?
  public init(shortsId: Swift.String? = nil, srn: Swift.String? = nil, activity: ShopLiveShortformSDK.ShopLiveShortformActivityData? = nil, cards: [ShopLiveShortformSDK.ShopLiveShortformCardData]? = nil, shortsDetail: ShopLiveShortformSDK.ShopLiveShortformDetailData? = nil, shortsType: Swift.String? = nil, rawDictionary: [Swift.String : Any]? = nil)
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @_hasMissingDesignatedInitializers final public class BridgeInterface {
    public static func connect(_ webview: WebKit.WKWebView)
    public static func present(viewController: UIKit.UIViewController?)
    public static func disconnect()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ShortFormConfigurationInfosManager {
  public static let shared: ShopLiveShortformSDK.ShortFormConfigurationInfosManager
  public func getRequestCount() -> Swift.Int
  public func getBaseUrl() -> Swift.String
  public func setConfigurationURLToEmpty()
  @objc deinit
}
@objc public protocol ShopLiveShortformReceiveHandlerDelegate {
  @objc optional func handleShare(shareUrl: Swift.String)
  @objc optional func handleShare(shareMetadata: ShopLiveShortformSDK.ShopLiveShareMetaData)
  @objc optional func onError(error: any Swift.Error)
  @objc optional func onEvent(webView: ShopLiveShortformSDK.ShopLiveWebViewWrapper?, command: Swift.String, payload: Swift.String?)
  @objc optional func onDidDisAppear()
  @objc optional func onDidAppear()
  @objc optional func handleProductItem(shortsId: Swift.String, shortsSrn: Swift.String, product: ShopLiveShortformSDK.ProductData)
  @objc optional func handleProductBanner(shortsId: Swift.String, shortsSrn: Swift.String, scheme: Swift.String, shortsDetail: ShopLiveShortformSDK.ShopLiveShortformDetailData)
  @objc optional func onShortsAttached(data: ShopLiveShortformSDK.ShopLiveShortformData)
  @objc optional func onShortsDetached(data: ShopLiveShortformSDK.ShopLiveShortformData)
}
public enum ShopLiveTagSearchOperator : Swift.String {
  case AND
  case OR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ListViewBaseBuilder {
  public init()
  final public func setCardViewType(type: ShopLiveShortformSDK.ShopLiveShortform.CardViewType)
  final public func enableSnap()
  final public func disableSnap()
  final public func enablePlayVideos()
  final public func disablePlayVideos()
  final public func scrollToTop()
  final public func setPlayOnlyWifi(isEnabled: Swift.Bool)
  final public func setCellSpacing(spacing: CoreFoundation.CGFloat)
  final public func setScrollContentOffset(offset: CoreFoundation.CGFloat)
  final public func getScrollContentOffset() -> CoreFoundation.CGPoint
  final public func setPlayableType(type: ShopLiveShortformSDK.ShopLiveShortform.PlayableType)
  final public func reloadItems()
  final public func setCellBackgroundColor(color: UIKit.UIColor)
  final public func notifyViewRotated()
  final public func submit()
  final public func setVisibleViewCount(isVisible: Swift.Bool)
  final public func setVisibleBrand(isVisible: Swift.Bool)
  final public func setVisibleTitle(isVisisble: Swift.Bool)
  final public func setVisibleProductCount(isVisible: Swift.Bool)
  final public func setVisibleDescription(isVisible: Swift.Bool)
  final public func setCellCornerRadius(radius: CoreFoundation.CGFloat)
  @objc deinit
}
extension ShopLiveShortformSDK.ListViewBaseBuilder {
  final public func enableShuffle()
  final public func disableShuffle()
  final public func setHashTags(tags: [Swift.String]?, tagSearchOperator: ShopLiveShortformSDK.ShopLiveTagSearchOperator?)
  final public func setBrands(brands: [Swift.String]?)
  final public func setSkus(skus: [Swift.String]?)
  final public func setShortsCollectionId(shortsCollectionId: Swift.String?)
}
public protocol ShopLiveShortformListViewDelegate : ObjectiveC.NSObject {
  func onListViewError(error: any Swift.Error)
  func onShortsSettingsInitialized()
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  public enum CardViewType {
    case type0
    case type1
    case type2
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.CardViewType, b: ShopLiveShortformSDK.ShopLiveShortform.CardViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ListViewType {
    case vertical
    case horizontal
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.ListViewType, b: ShopLiveShortformSDK.ShopLiveShortform.ListViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlayableType {
    case FIRST
    case CENTER
    case ALL
    public static func == (a: ShopLiveShortformSDK.ShopLiveShortform.PlayableType, b: ShopLiveShortformSDK.ShopLiveShortform.PlayableType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_inheritsConvenienceInitializers public class CardTypeViewBuilder : ShopLiveShortformSDK.ListViewBaseBuilder {
    @discardableResult
    public func build(cardViewType: ShopLiveShortformSDK.ShopLiveShortform.CardViewType = .type1, listViewDelegate: (any ShopLiveShortformSDK.ShopLiveShortformListViewDelegate)? = nil, shortsCollectionDelegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?, enableSnap: Swift.Bool = false, enablePlayVideo: Swift.Bool = true, playOnlyOnWifi: Swift.Bool = false, cellSpacing: CoreFoundation.CGFloat = 8, cellRadius: CoreFoundation.CGFloat = 16, viewCountVisibility: Swift.Bool = true, avAudioSessionCategoryOptions: AVFAudio.AVAudioSession.CategoryOptions? = nil) -> Self
    public func getView() -> UIKit.UIView
    override public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class ListViewBuilder : ShopLiveShortformSDK.ListViewBaseBuilder {
    @discardableResult
    public func build(cardViewType: ShopLiveShortformSDK.ShopLiveShortform.CardViewType = .type1, listViewType: ShopLiveShortformSDK.ShopLiveShortform.ListViewType, playableType: ShopLiveShortformSDK.ShopLiveShortform.PlayableType = .FIRST, listViewDelegate: (any ShopLiveShortformSDK.ShopLiveShortformListViewDelegate)? = nil, shortsCollectionDelegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?, enableSnap: Swift.Bool = false, enablePlayVideo: Swift.Bool = true, playOnlyOnWifi: Swift.Bool = false, cellSpacing: CoreFoundation.CGFloat = 8, cellRadius: CoreFoundation.CGFloat = 12, viewCountVisibility: Swift.Bool = true, avAudioSessionCategoryOptions: AVFAudio.AVAudioSession.CategoryOptions? = nil) -> Self
    public func getView() -> UIKit.UIView
    override public init()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ShopLiveShortform {
  public static var sdkVersion: Swift.String
  public static func play(requestData: ShopLiveShortformSDK.ShopLiveShortformCollectionData?)
  public static func play(shortformIdsData: ShopLiveShortformSDK.ShopLiveShortformIdsData, dataSourceDelegate: any ShopLiveShortformSDK.ShortsCollectionViewDataSourcRequestDelegate, shortsCollectionDelegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
  @available(iOS, deprecated: 1.4.6, message: "this method will be removed on 1.4.7")
  public static func play(requestData: ShopLiveShortformSDK.ShopLiveShortformRelatedData?)
  public static func showPreview(requestData: ShopLiveShortformSDK.ShopLiveShortformPreviewData)
  public static func close()
  public static func getCurrentKeyWindow() -> UIKit.UIWindow?
  public static func getShopliveWindow() -> UIKit.UIWindow?
  public static func setReferrer(referrer: Swift.String?)
  public static func setVisibileDetailViews(options: ShopLiveShortformSDK.ShopLiveShortformVisibleDetailData)
  public static func setResizeMode(mode: ShopliveSDKCommon.ShopLiveResizeMode)
  @objc deinit
}
extension ShopLiveShortformSDK.ShopLiveShortform {
  @objc public enum PreviewPosition : Swift.Int {
    case topLeft
    case topRight
    case bottomLeft
    case bottomRight
    case `default`
    public var name: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ShopLiveShortsCollectionView : UIKit.UIView, ShopliveSDKCommon.SLReactor {
  public enum Action {
    case onStartRotation(size: CoreFoundation.CGSize)
    case onChangingRotation(size: CoreFoundation.CGSize)
    case onFinishedRotation(size: CoreFoundation.CGSize)
    case play
    case pause
  }
  public enum Result {
  }
  @_Concurrency.MainActor(unsafe) public var resultHandler: ((ShopLiveShortformSDK.ShopLiveShortsCollectionView.Result) -> ())?
  @_Concurrency.MainActor(unsafe) public init(requestData: ShopLiveShortformSDK.ShopLiveShortformCollectionData?)
  @_Concurrency.MainActor(unsafe) public init(shortformIdsData: ShopLiveShortformSDK.ShopLiveShortformIdsData, dataSourceDelegate: any ShopLiveShortformSDK.ShortsCollectionViewDataSourcRequestDelegate, shortsCollectionDelegate: (any ShopLiveShortformSDK.ShopLiveShortformReceiveHandlerDelegate)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func action(_ action: ShopLiveShortformSDK.ShopLiveShortsCollectionView.Action)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ShopLiveWebViewWrapper : ObjectiveC.NSObject {
  final public let webView: UIKit.UIView
  @objc deinit
  public func evaluateJavaScript(command: Swift.String, payload: [Swift.String : Any])
}
public protocol ShortsCollectionViewDataSourcRequestDelegate : AnyObject {
  func onShortformListPagination(completion: @escaping (((ShopLiveShortformSDK.ShopLiveShortformIdsMoreData?, (any Swift.Error)?)) -> ()))
}
public struct ShopLiveShortformVisibleDetailData {
  public var isBookMarkVisible: Swift.Bool
  public var isShareButtonVisible: Swift.Bool
  public var isCommentButtonVisible: Swift.Bool
  public var isLikeButtonVisible: Swift.Bool
  public init(isBookMarkVisible: Swift.Bool = true, isShareButtonVisible: Swift.Bool = true, isCommentButtonVisible: Swift.Bool = true, isLikeButtonVisible: Swift.Bool = true)
}
extension ShopLiveShortformSDK.ShopLiveTagSearchOperator : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveTagSearchOperator : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveTagSearchOperator : Swift.RawRepresentable {}
extension ShopLiveShortformSDK.ShopLiveShortform.CardViewType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.CardViewType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.ListViewType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.ListViewType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PlayableType : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PlayableType : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PreviewPosition : Swift.Equatable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PreviewPosition : Swift.Hashable {}
extension ShopLiveShortformSDK.ShopLiveShortform.PreviewPosition : Swift.RawRepresentable {}
